---
title: ""
---


```{r setup, echo=FALSE}

knitr::opts_chunk$set(
  echo = FALSE
)
```

```{r libraries, message=FALSE, warning=FALSE}

library(tidyverse)
library(readxl)
library(janitor)
library(magick)
library(DT)
library(reactable)
library(stringr)
```

```{r data-read}
#| message: false
#| warning: false

# Read data
df <- read_excel(here::here("data/tables/inventory_2022_11_18.xlsx")) %>% janitor::clean_names()

# Clean columns
source(here::here("scripts/past_perfect_clean_fields.R"))
```

```{r df-sample}
#| eval: false

#### SAMPLE MAIN DF

set.seed(7575)

# Sample of records with images
df_img <- df |> drop_na(imagefile) |> 
  slice_sample(n=300)

# Sample of records without images
df_img_na <- df |> filter(is.na(imagefile)) |> 
  slice_sample(n = 2)

# Combine to make a smaller table
df <- rbind(df_img, df_img_na)
```

```{r images-copy}
#| warning: false
#| message: false
#| echo: false
#| results: hide


### Clean out directory
image_list <- list.files("./data/images_full/")
image_list <- image_list[image_list != "NMSU Museum Logo.png"]
file.remove(paste0("./data/images_full/", image_list))

### Copy the list of files.
file.copy(from =  paste0("./data/Images/", df$imagefile), to = here::here("./data/images_full/"))
file.copy(from = "./data/Images/NMSU Museum Logo.png", to = "./data/images_full/", overwrite = TRUE)


image_list <- list.files("./data/images_full/")

### Get just the filename
df$imagefile <- str_remove(df$imagefile, "\\d\\d\\d\\\\")

```

```{r images-resize-save}

# Add relative file path to image_list
images_full <- paste0("./data/images_full/", image_list)
images_thumbs <- paste0("./data/images_thumbs/", image_list)

# Read images to list
images <- magick::image_read(images_full)

# Resize images in list
images <- magick::image_scale(images, "150")

# Write out images
for (i in 1:length(images)) {
  magick::image_write(images[i], images_thumbs[i])
}
```

```{r df-wrangle}

# Select columns and lightly wrangle
df <-  df |>
  select(
    c(
      # "accessno",
      # "cat",
      "collection",
      # "collector",
      # "date",
      # "descrip", # Past Perfect Description
      # "homeloc",
      "imagefile",
      # "imageno",
      "material",
      # "notes",
      "objectid",
      "objname",
      "otherno",
      "udf1",
      "udf3",
      "udf8",
      "udf9",
      "udf10",
      "udf21" # University Museum Description
    )
  ) |>
  relocate(objectid) |>
  rename(
    "object" = "objname",
    "other name" = "otherno",
    "culture" = "udf1",
    "source" = "udf3",
    "country" = "udf8",
    "state" = "udf9",
    "locale" = "udf10",
    "description" = "udf21"
  ) |>
  relocate(source, .before = culture) |>
  
  
  # To display images inside DT they must be in HTML tags
  mutate(
    imagefile = paste0(
      "<a href='./data/images_full/",
      imagefile,
      "' target = '_blank' rel='noreferrer noopener'>",
      "<img src='./data/images_thumbs/",
      imagefile,
      "'  width = '125'></a></img>"
    )
  ) |>
  
  mutate(
    imagefile = na_if(
      imagefile,
      "<a href='./data/images_full/NA' target = '_blank' rel='noreferrer noopener'><img src='./data/images_full/NA'  width = '125'></a></img>"
    )
  ) |>
  
  
  mutate(
    imagefile =  str_replace_all(
      string = imagefile,
      pattern = "images_full/NA",
      replacement = "images_full/NMSU Museum Logo.png"
    ))|>
  mutate(
    imagefile =     str_replace_all(
      string = imagefile,
      pattern = "images_thumbs/NA",
      replacement = "images_thumbs/NMSU Museum Logo.png"
  )) |> 
  
  filter(!grepl("SC2014|SC2009", objectid)) |> # remove skull casts
  filter(!is.na(objectid))

```


::: {.callout-note collapse="true"}
## Click for Instructions

-   The inventory offers a number of tools to interact with the data (@fig-general-layout). The simplest is the global `Search` box. This allows for searching across all columns of the table. To the left, there is a more highly controlled `Search Builder`. Below this, `Search Results` are reported and there are buttons for `Data Download` and use in other applications.

![General layout of search tools.](https://i.imgur.com/Yq7A8Mh.png){#fig-general-layout}

:::{layout-ncol=2 layout-valign="center"}

-   To set a filter in the `Search Builder`, click on the `Add Condition` button (@fig-add-condition). This brings up the condition statement builder which is composed of three key parts: `Data`, `Condition`, and `Value`.

![The `Add Condition` button.](https://i.imgur.com/C9UVsqY.png){#fig-add-condition}


-   The `Data` button determines which field one will use for filtering (@fig-data-button). Use the drop down list from this button to select the desired field for filtering.

![Data button showing inventory field names.](https://i.imgur.com/PCf5gYp.png){#fig-data-button}


-   The `Condition` button determines the nature of the search operator (@fig-condition-button). There are many options, and each functions differently. The `Exact` argument gives narrow searches while arguments like `Contains` or `Starts With` offer more inclusive searches. Users are encouraged to experiment with different search arguments to see which best fits their needs.

![`Condition` button showing different kinds of operators.](https://i.imgur.com/bvnuonO.png){#fig-condition-button}

-   If `Condition` is set to `Equals` then the `Value` field lists all possible entries in the selected `Data` column (@fig-condition-equals). Thus, `Equals` sets conditions for exact matches to particular field values. This can be useful for searching the `collection`, or `object` fields.

![Illustrating values returned when `Condition` is set to `Equals`.](https://i.imgur.com/08uRoU6.png){#fig-condition-equals}

-   If `Condition` is set to `Contains` then the `Value` field is set to blank and it will return records from the target `Data` field that match the string a user enters into the `Value` field (@fig-condition-contains). This can be useful for casting the net wide. For example, if `Data` is set to the field `culture` and `Condition` is set to `Contains` and a user enters the word `Pueblo` into `Value` field the search builder will return records that include words like "Ancestral Pueblo", "Acoma Pueblo", "Jimez Pueblo", etc.

![Illustrating when `Condition` is set to `Contains` and search strings are applied to `Value`](https://i.imgur.com/w1z6AzC.png){#fig-condition-contains}

-   It is possible to string multiple query statements together by adding additional conditions (@fig-operator-logic). Additional conditions can be set to use either `And` or `Or` logic. The type of logical operator can be toggled from `And` to `Or` by clicking on the button.

![Illustrating how to alter logical operators for multi condition searchs.](https://i.imgur.com/yQtTTLf.png){#fig-operator-logic}

:::

-   Click an associated `X` to clear a search condition.

:::


```{r df-show-dt}
#| column: screen-inset
#| warning: false
#| message: false
#| error: false
#| eval: true

# Existing working model
datatable(
  df,
  escape = FALSE,
  rownames = FALSE,
  # filter = "top",
  options = list(
    dom = 'QflriBtip',
    buttons = c("colvis", "copy", "csv", "excel"),
    columnDefs = list(
      list(
        searchPanes = list(show = FALSE),
        targets = c(0, 2:6, 9:10),
        searchPanes = list(show = TRUE, initCollapsed = TRUE),
        targets = c(1 , 7:8)
      )
    )
  ),
  extensions = c('Select', 'SearchPanes', "DateTime", "Buttons", "Responsive", "SearchBuilder"),
  selection = 'none'
)

```



